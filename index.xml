<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>首页 on 首页</title>
    <link>https://candoeverything.github.io/</link>
    <description>Recent content in 首页 on 首页</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zk-CN</language>
    <lastBuildDate>Fri, 19 Jul 2019 14:44:26 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>数据仓库分层简单阐述</title>
      <link>https://candoeverything.github.io/2019/datawarehouse/</link>
      <pubDate>Fri, 19 Jul 2019 14:44:26 +0800</pubDate>
      
      <guid>https://candoeverything.github.io/2019/datawarehouse/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据仓库的概念&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据仓库分层&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据仓库每层的阐述&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据仓库分层的作用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;数据仓库的概念&#34;&gt;数据仓库的概念&lt;/h1&gt;

&lt;p&gt;数据仓库是面向企业级的，为企业的每个部门提供决策手段。&lt;/p&gt;

&lt;h1 id=&#34;数据仓库的分层&#34;&gt;数据仓库的分层&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;在一般的的企业中，数据仓库一般分为4个层次。即ODS（Operation Data Store 数据原始层），DWD（Data Warehouse Detail 明细数据层），DWS（Dara Warehouse Service 数据服务层），ADS（application Data Store 数据应用层）。
不同企业可能分的层次不一样。也有可能每个层次的命名不一样，因为没有统一的命名规则，但是每层的功能都是一样的。
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;ODS：存储数据最原始的数据，数据不得任何处理，一定要原封不动。&lt;/li&gt;
&lt;li&gt;DWD：对数据数据进行ETL处理，该层结构和粒度与ODS保持一致。&lt;/li&gt;
&lt;li&gt;DWS：在DWD的基础上，对数据进行汇总处理。&lt;/li&gt;
&lt;li&gt;ADS：为报表提供数据。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;数据仓库分层的作用&#34;&gt;数据仓库分层的作用&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;隔离原始数据。原始数据单层存储，不守其他层次操作的影响。&lt;/li&gt;
&lt;li&gt;减少重复处理。既然每一层都有相对于的功能，处理某个功能只要到相对于的层开发即可。不需要第一层开始到最后一层。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>MySQL异常：You can&#39;t specify target table for update in FROM clause解决办法</title>
      <link>https://candoeverything.github.io/2019/mysql_exce2/</link>
      <pubDate>Thu, 18 Jul 2019 12:18:16 +0800</pubDate>
      
      <guid>https://candoeverything.github.io/2019/mysql_exce2/</guid>
      <description>

&lt;h2 id=&#34;原因&#34;&gt;原因&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;在同一张表中，不能先select某个字段的值，再进行update这个字段的字。

例如：delete from person where id =(select max(id) from Person a  group by email having count(email)&amp;gt;=2) ;

这条sql语句，先查询where 条件后面的子查询 id，然后在进行delete这个id，所以报错！！
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;解决方法&#34;&gt;解决方法：&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;可以通过中间表消除。                                                                   delete from person where id =(select * from (select max(id) from Person a  group by email having count(email)&amp;gt;=2) a);
将子查询通过中间表包装起来即可。
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Mysql异常报错:This version of MySQL doesn&#39;t yet support &#39;LIMIT &amp; IN/ALL/ANY/SOME subquery</title>
      <link>https://candoeverything.github.io/2019/mysql_exce1/</link>
      <pubDate>Thu, 18 Jul 2019 12:01:51 +0800</pubDate>
      
      <guid>https://candoeverything.github.io/2019/mysql_exce1/</guid>
      <description>

&lt;h2 id=&#34;this-version-of-mysql-doesn-t-yet-support-limit-in-all-any-some-subquery&#34;&gt;This version of MySQL doesn&amp;rsquo;t yet support &amp;lsquo;LIMIT &amp;amp; IN/ALL/ANY/SOME subquery&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;select d.name Department ,e.name Employee,Salary from Employee e join Department d on e.DepartmentId=d.id where e.id=(select id from Employee order by Salary limit 3);     我在求一道求工资前三的员工的信息及其所属的部门的时候，这是我写的sql语句。执行的时候却抛出异常This version of MySQL doesn&#39;t yet support &#39;LIMIT &amp;amp; IN/ALL/ANY/SOME subquery。
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;原因&#34;&gt;原因&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;从字面上来看，这个版本的mysql不支持limit和IN/ALL/ANY/SOME同时存在。简单来说就是子查询的时候IN/ALL/ANY/SOME和limit不能直接的搭配使用。
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;解决方法&#34;&gt;解决方法&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;可以将通过中间表将带有limit的sql语句 [select id from (select id from Employee order by Salary limit 3) tmp ]包装起来，这样就能正常运行了。

 select d.name Department ,e.name Employee,Salary from Employee e join Department d on e.DepartmentId=d.id where e.id=(select id from (select id from Employee order by Salary limit 3) tmp);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>更新本地代码上传带git</title>
      <link>https://candoeverything.github.io/post/upload/</link>
      <pubDate>Wed, 17 Jul 2019 22:54:09 +0800</pubDate>
      
      <guid>https://candoeverything.github.io/post/upload/</guid>
      <description>&lt;p&gt;//新建一个文件
hugo new post/upload.md&lt;/p&gt;

&lt;p&gt;//更新本地代码以远端仓库一致
hugo &amp;ndash;theme=LeaveIt &amp;ndash;baseUrl=&amp;ldquo;&lt;a href=&#34;https://candoeverything.github.io/&amp;quot;&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://candoeverything.github.io/&amp;quot;&lt;/a&gt; &amp;ndash;buildDrafts
cd public
git add .
git commit -m &amp;ldquo;XXXXXXX&amp;rdquo;
git pull origin master
git push origin master&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>更新本地代码上传带git</title>
      <link>https://candoeverything.github.io/2019/upload/</link>
      <pubDate>Wed, 17 Jul 2019 22:54:09 +0800</pubDate>
      
      <guid>https://candoeverything.github.io/2019/upload/</guid>
      <description>&lt;p&gt;//新建一个文件
hugo new post/upload.md&lt;/p&gt;

&lt;p&gt;//更新本地代码以远端仓库一致
hugo &amp;ndash;theme=LeaveIt &amp;ndash;baseUrl=&amp;ldquo;&lt;a href=&#34;https://candoeverything.github.io/&amp;quot;&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://candoeverything.github.io/&amp;quot;&lt;/a&gt; &amp;ndash;buildDrafts
cd public
git add .
git commit -m &amp;ldquo;XXXXXXX&amp;rdquo;
git pull origin master
git push origin master&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Flume简单概述</title>
      <link>https://candoeverything.github.io/2019/blog/</link>
      <pubDate>Wed, 17 Jul 2019 12:47:15 +0800</pubDate>
      
      <guid>https://candoeverything.github.io/2019/blog/</guid>
      <description>

&lt;h3 id=&#34;1-flume的概念&#34;&gt;1.Flume的概念&lt;/h3&gt;

&lt;h3 id=&#34;2-flume的作用和用途&#34;&gt;2.Flume的作用和用途&lt;/h3&gt;

&lt;h3 id=&#34;3-flume的组成架构&#34;&gt;3.Flume的组成架构&lt;/h3&gt;

&lt;h3 id=&#34;4-flume的事务&#34;&gt;4.Flume的事务&lt;/h3&gt;

&lt;h1 id=&#34;1-1-什么是flume&#34;&gt;1.1 什么是Flume？&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;定义：Flume是一个高可用，分布式的海量日志采集系统。
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;2-1flume的的作用是什么&#34;&gt;2.1Flume的的作用是什么？&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Flume的作用：实时的监控某个某个文件夹或者文件内数据的变化，然后再将变化的数据传输到目的源存储或者分析处理。
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;2-2flume的企业中主要用途&#34;&gt;2.2Flume的企业中主要用途&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;    实时的读取服务器产生的日志数据或者爬虫爬爬取的数据，然后传输到指定目的源处理。
    一般flume下端都会与kafka搭配，这样可以指定数据到多个目的地。（例如数据传输到hdfs进行备份，同时也传输给spark进行实时的分析数据等等。。）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/CanDoEverything/candoeverything.github.io/blob/master/posts/flume.png?raw=true&#34; alt=&#34;markdown&#34; title=&#34;markdown&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;3-1flume的组成架构&#34;&gt;3.1Flume的组成架构&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Flume的工作基本单元是Agent，agent是一个jvm进程，它是将数据包装成事件event从数据源传输到目的源。
Agent有三个组件组成：                                                                1.Source：从数据源拉取数据，通过put事务将数据传输给channel。
2.Channel：作为Source和Sink的数据的缓存区。
3.Sink：拉取缓存在channel的数据，然后传输给下一个目的源。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CanDoEverything/candoeverything.github.io/master/posts/1.PNG&#34; alt=&#34;markdown&#34; title=&#34;markdown&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;4-1flume的事务&#34;&gt;4.1Flume的事务&lt;/h1&gt;

&lt;h4 id=&#34;put事务&#34;&gt;Put事务&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;putlist：是一个临时缓冲区，用于缓存数据。
doPut：将数据缓存到临时缓存区putlist。
doCommit：检查channel内存是否足够。若是足够，将数据写入到channel。若是不够，则执行dorollback。
doRollBack：当channel内存不够时候，将数据回滚，保证了数据安全性。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;take事务&#34;&gt;Take事务&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;takelist：是一个临时缓冲区，用于缓存数据。
doTake：将channel的数据缓存到临时缓冲区takelist，并删掉channel内的数据。
doCommit：检查数据是否全部成功传输到下一个目的源。若全部传输成功，则删除掉takelist缓存的数据。
doRollBack：若是传输过程中出现故障，数据没能全部传输成功，则将takelist内的数据回滚给channel。
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>&gt;</title>
      <link>https://candoeverything.github.io/about/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://candoeverything.github.io/about/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=2239322943,1333922446&amp;amp;fm=173&amp;amp;s=E08BB0575C4152D6C00D1CF70300E068&amp;amp;w=393&amp;amp;h=292&amp;amp;img.JPEG&#34; alt=&#34;markdown&#34; title=&#34;markdown&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>